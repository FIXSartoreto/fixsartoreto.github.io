{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","className","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","rows","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","alt","src","to","defaultProps","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","EditMovie","shouldRedirect","match","params","movieAPI","then","response","push","MovieDetails","loading","srcImg","substring","MovieList","key","NewMovie","redirect","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82c54dce.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\n\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">Título</label>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">Imagem</label>\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n        <textarea\n          id=\"movie_storyline\"\n          value={storyline}\n          rows=\"6\"\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Gênero</label>\n        <select\n          id=\"movie_genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">Avaliação</label>\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"div-form\">\n        <form className=\"default-form\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, imagePath, id } = movie;\n\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <p className=\"movie-card-details\"><Link className=\"details\" to={`movies/${id}`}>VER DETALHES</Link></p>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }),\n};\n\nMovieCard.defaultProps = { movie: {} };\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: {},\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    movieAPI.getMovie(id)\n    .then((response) => this.setState({\n      status: 'loaded',\n      movie: response,\n    }));\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect push to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      // render Loading\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n        <div className=\"links\">\n          <Link className=\"default-link\" to=\"/\">VOLTAR</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: true,\n      movie: {},\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    movieAPI.getMovie(id)\n    .then((response) => this.setState({\n      loading: false,\n      movie: response,\n    }));\n  }\n\n  async handleSubmit() {\n    const { id } = this.props.match.params;\n    await movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n\n    const { movie, loading } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n    let srcImg = '';\n\n    if (loading) return <Loading />;\n\n    if (imagePath.substring(0, 7) === 'images/') {\n      srcImg = `../${imagePath}`;\n    } else {\n      srcImg = imagePath;\n    }\n\n    return (\n      <div data-testid=\"movie-details\" className=\"movie-details-body\">\n        <div>\n          <section className=\"movie-details\">\n            <img alt=\"Movie Cover\" src={srcImg} className=\"movie-card-image\" />\n            <div className=\"movie-card-body\">\n              <div className=\"title-details\">\n                <h2 className=\"movie-card-title\">{`Title: ${title}`}</h2>\n              </div>\n              <p className=\"movie-card-subtitle\">{`Subtitle: ${subtitle}`}</p>\n              <p className=\"movie-card-storyline\">{`Storyline: ${storyline}`}</p>\n              <p>{`Genre: ${genre}`}</p>\n            </div>\n            <div className=\"movie-card-rating\">\n              <p className=\"rating\">{`Rating: ${rating}`}</p>\n            </div>\n          </section>\n          <section className=\"links\">\n            <Link className=\"default-link\" to={`${id}/edit`}>EDITAR</Link>\n            <Link className=\"default-link\" to={'/'}>VOLTAR</Link>\n            <Link className=\"default-link\" to={'/'} onClick={this.handleSubmit}>DELETAR</Link>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport { Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\nimport './MovieList.css';\nimport './MovieForm.css';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    }\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies()\n    .then((response) => this.setState({\n      movies: response,\n      loading: false,\n    }))\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    if (loading) return <Loading />\n\n    return (\n      <div>\n        <div>\n          <Link className=\"default-link\" to=\"movies/new\">ADICIONAR CARTÃO</Link>\n        </div>\n        <div data-testid=\"movie-list\" className=\"movie-list\">\n          {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    await movieAPI.createMovie(newMovie);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { redirect } = this.state;\n\n    if (redirect) return <Redirect push to=\"/\" />;\n\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={this.handleSubmit} />\n        <div className=\"links\">\n          <Link className=\"default-link\" to=\"/\">VOLTAR</Link>\n        </div>\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { EditMovie, MovieDetails, MovieList, NewMovie, NotFound } from './pages';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div>\n      <h1>Movie Card Library CRUD</h1>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/movies/new\" component={NewMovie} />\n          <Route exact path=\"/movies/:id\" render={(props) => <MovieDetails {...props} />} />\n          <Route exact path=\"/movies/:id/edit\" component={EditMovie} />\n          <Route exact path=\"/\" component={MovieList} />\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}